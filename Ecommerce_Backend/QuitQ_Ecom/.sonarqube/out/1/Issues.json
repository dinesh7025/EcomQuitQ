{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Microsoft (R) Visual C# Compiler",
        "version": "4.11.0.0",
        "fileVersion": "4.11.0-3.24365.8 (9e9c7c1d)",
        "semanticVersion": "4.11.0",
        "language": "en-US"
      },
      "results": [
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 28,
                  "endLine": 56,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_context' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 26,
                  "endLine": 14,
                  "endColumn": 34
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 26,
                  "endLine": 14,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_productRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "endLine": 15,
                  "endColumn": 49
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 31,
                  "endLine": 15,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 85,
                  "startColumn": 28,
                  "endLine": 85,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_context' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 34
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_wishlistRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 16,
                  "endColumn": 51
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 16,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8602",
          "level": "warning",
          "message": "Dereference of a possibly null reference.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 92,
                  "startColumn": 36,
                  "endLine": 92,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_context' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 34
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "endLine": 15,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_discountRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 16,
                  "endColumn": 51
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 16,
                  "startColumn": 32,
                  "endLine": 16,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_context' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 26,
                  "endLine": 11,
                  "endColumn": 34
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 26,
                  "endLine": 11,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_cartRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 28,
                  "endLine": 12,
                  "endColumn": 43
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 28,
                  "endLine": 12,
                  "endColumn": 43
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_context' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 26,
                  "endLine": 13,
                  "endColumn": 34
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 26,
                  "endLine": 13,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_loginRepository' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8618",
          "level": "warning",
          "message": "Non-nullable field '_userRepositoryMock' must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring the field as nullable.",
          "suppressionStates": [
            "suppressedInSource"
          ],
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 35,
                  "endLine": 15,
                  "endColumn": 54
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 15,
                  "startColumn": 35,
                  "endLine": 15,
                  "endColumn": 54
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 12,
                  "startColumn": 14,
                  "endLine": 12,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "endLine": 13,
                  "endColumn": 37
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 9,
                  "startColumn": 14,
                  "endLine": 9,
                  "endColumn": 33
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CA1050",
          "level": "note",
          "message": "Declare types in namespaces",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 11,
                  "startColumn": 14,
                  "endLine": 11,
                  "endColumn": 34
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 56,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2017",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 68,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNull"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 59
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 58,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 9,
                  "endLine": 55,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 9,
                  "endLine": 70,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 56,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 71,
                  "startColumn": 9,
                  "endLine": 71,
                  "endColumn": 48
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 9,
                  "endLine": 72,
                  "endColumn": 70
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "endLine": 73,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class3.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 9,
                  "endLine": 76,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2017",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 64,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 52,
                  "startColumn": 9,
                  "endLine": 52,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "endLine": 53,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 54,
                  "startColumn": 9,
                  "endLine": 54,
                  "endColumn": 49
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2017",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 87,
                  "startColumn": 9,
                  "endLine": 87,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 45
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class5.cs",
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 59,
                  "startColumn": 9,
                  "endLine": 59,
                  "endColumn": 30
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 84,
                  "startColumn": 9,
                  "endLine": 84,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2019",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "endLine": 91,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNotNull"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 92,
                  "startColumn": 9,
                  "endLine": 92,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class4.cs",
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "endLine": 93,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "endLine": 85,
                  "endColumn": 51
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 86,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 50
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2017",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class2.cs",
                "region": {
                  "startLine": 118,
                  "startColumn": 9,
                  "endLine": 118,
                  "endColumn": 36
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsNull"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 77,
                  "startColumn": 9,
                  "endLine": 77,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 95,
                  "startColumn": 9,
                  "endLine": 95,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///D:/DOTNET%20FSD%20Training/CaseStudy/Ecommerce_Backend/QuitQ_Ecom/EcomTests/Class1.cs",
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 31
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        }
      ],
      "rules": {
        "CA1050": {
          "id": "CA1050",
          "shortDescription": "Declare types in namespaces",
          "fullDescription": "Types are declared in namespaces to prevent name collisions and as a way to organize related types in an object hierarchy.",
          "defaultLevel": "note",
          "helpUri": "https://learn.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1050",
          "properties": {
            "category": "Design",
            "isEnabledByDefault": true,
            "tags": [
              "PortedFromFxCop",
              "Telemetry",
              "EnabledRuleInAggressiveMode"
            ]
          }
        },
        "CS8602": {
          "id": "CS8602",
          "shortDescription": "Dereference of a possibly null reference.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8602)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8618": {
          "id": "CS8618",
          "shortDescription": "Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8618)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2002": {
          "id": "NUnit2002",
          "shortDescription": "Consider using Assert.That(expr, Is.False) instead of Assert.IsFalse(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2002.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2003": {
          "id": "NUnit2003",
          "shortDescription": "Consider using Assert.That(expr, Is.True) instead of Assert.IsTrue(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2003.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2005": {
          "id": "NUnit2005",
          "shortDescription": "Consider using Assert.That(actual, Is.EqualTo(expected)) instead of Assert.AreEqual(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual).",
          "defaultLevel": "warning",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2005.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2017": {
          "id": "NUnit2017",
          "shortDescription": "Consider using Assert.That(expr, Is.Null) instead of Assert.IsNull(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Null), instead of the classic model, Assert.IsNull(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2017.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2019": {
          "id": "NUnit2019",
          "shortDescription": "Consider using Assert.That(expr, Is.Not.Null) instead of Assert.IsNotNull(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.Not.Null), instead of the classic model, Assert.IsNotNull(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2019.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}